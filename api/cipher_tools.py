from Crypto.Cipher import AES
from django.conf import settings
import hashlib, random
import base64
"""
source: http://www.pythondiary.com/blog/Jan.13,2020/creating-transparently-encrypted-field-django.html
"""

def __random5():
    """ Generate a random sequence of 5 bytes for use in a SHA512 hash. """
    return bytes(''.join(map(chr,random.sample(range(255),5))), 'utf-8')

def __fill():
    """ This is used to generate filler data to pad our plain text before encryption. """
    return hashlib.sha512(__random5()).digest()

def __cipher():
    """ A simple constructor we can call from both our encrypt and decrypt functions. """
    key=hashlib.sha256(bytes(settings.SECRET_KEY, 'utf-8')).digest() # Key is generated by our SECRET_KEY in Django.
    return AES.new(key) # Here you should perhaps use MODE_CBC, and add an initialization vector for additional security.  ECB is the default, and isn't very secure.

# def encrypt(data):
#     """ The entrypoint for encrypting our field. """
#     FILL=__fill()+__fill()+__fill() # This is used to generate filler so we can satisfy the block size of AES.  It is best to pad with random data, than to pad with say nulls.
#     return __cipher().encrypt(bytes(data, 'utf-8')+b'|'+FILL[len(data)+1:])

# def decrypt(data):
#     """ Entrypoint for decryption """
#     return __cipher().decrypt(data).split(b'|')[0].decode('utf-8')


def encrypt(data):
    #remoce any left and right spaces from encoded data
    print("Original data", data)
    data = data.strip()
    encoded_data = data.rjust(32).encode('utf-8')
    cipher = AES.new(settings.SECRET_KEY[0:32].encode('utf-8'),AES.MODE_ECB) 
    code = base64.b64encode(cipher.encrypt(encoded_data))
    print("New Code: ", code)
    code_as_str = code.decode('utf-8')
    print("Encrypted: ", code_as_str)
    return code_as_str

def decrypt(data):
    print("Got ", data)
    print("As Code: ", data.encode('utf-8'))
    data = data.encode('utf-8')
    cipher = AES.new(settings.SECRET_KEY[0:32].encode('utf-8'),AES.MODE_ECB) 
    return cipher.decrypt(base64.b64decode(data)).decode("utf-8").strip()


# import base64
# from Crypto.Cipher import AES

# msg_text = b'test some plain text here'.rjust(32)
# secret_key = b'1234567890123456'

# cipher = AES.new(secret_key,AES.MODE_ECB) # never use ECB in strong systems obviously
# encoded = base64.b64encode(cipher.encrypt(msg_text))
# print(encoded)
# decoded = cipher.decrypt(base64.b64decode(encoded))
# print(decoded)